/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/summernote@0.8.18/src/js/base/module/LinkDialog.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import $ from"jquery";import env from"../core/env";import key from"../core/key";import func from"../core/func";export default class LinkDialog{constructor(t){this.context=t,this.ui=$.summernote.ui,this.$body=$(document.body),this.$editor=t.layoutInfo.editor,this.options=t.options,this.lang=this.options.langInfo,t.memo("help.linkDialog.show",this.options.langInfo.help["linkDialog.show"])}initialize(){const t=this.options.dialogsInBody?this.$body:this.options.container,o=['<div class="form-group note-form-group">',`<label for="note-dialog-link-txt-${this.options.id}" class="note-form-label">${this.lang.link.textToDisplay}</label>`,`<input id="note-dialog-link-txt-${this.options.id}" class="note-link-text form-control note-form-control note-input" type="text"/>`,"</div>",'<div class="form-group note-form-group">',`<label for="note-dialog-link-url-${this.options.id}" class="note-form-label">${this.lang.link.url}</label>`,`<input id="note-dialog-link-url-${this.options.id}" class="note-link-url form-control note-form-control note-input" type="text" value="http://"/>`,"</div>",this.options.disableLinkTarget?"":$("<div/>").append(this.ui.checkbox({className:"sn-checkbox-open-in-new-window",text:this.lang.link.openInNewWindow,checked:!0}).render()).html(),$("<div/>").append(this.ui.checkbox({className:"sn-checkbox-use-protocol",text:this.lang.link.useProtocol,checked:!0}).render()).html()].join(""),i=`<input type="button" href="#" class="btn btn-primary note-btn note-btn-primary note-link-btn" value="${this.lang.link.insert}" disabled>`;this.$dialog=this.ui.dialog({className:"link-dialog",title:this.lang.link.insert,fade:this.options.dialogsFade,body:o,footer:i}).render().appendTo(t)}destroy(){this.ui.hideDialog(this.$dialog),this.$dialog.remove()}bindEnterKey(t,o){t.on("keypress",t=>{t.keyCode===key.code.ENTER&&(t.preventDefault(),o.trigger("click"))})}toggleLinkBtn(t,o,i){this.ui.toggleBtn(t,o.val()&&i.val())}showLinkDialog(t){return $.Deferred(o=>{const i=this.$dialog.find(".note-link-text"),e=this.$dialog.find(".note-link-url"),n=this.$dialog.find(".note-link-btn"),s=this.$dialog.find(".sn-checkbox-open-in-new-window input[type=checkbox]"),l=this.$dialog.find(".sn-checkbox-use-protocol input[type=checkbox]");this.ui.onDialogShown(this.$dialog,()=>{this.context.triggerEvent("dialog.shown"),!t.url&&func.isValidUrl(t.text)&&(t.url=t.text),i.on("input paste propertychange",()=>{t.text=i.val(),this.toggleLinkBtn(n,i,e)}).val(t.text),e.on("input paste propertychange",()=>{t.text||i.val(e.val()),this.toggleLinkBtn(n,i,e)}).val(t.url),env.isSupportTouch||e.trigger("focus"),this.toggleLinkBtn(n,i,e),this.bindEnterKey(e,n),this.bindEnterKey(i,n);const r=void 0!==t.isNewWindow?t.isNewWindow:this.context.options.linkTargetBlank;s.prop("checked",r);const a=!t.url&&this.context.options.useProtocol;l.prop("checked",a),n.one("click",n=>{n.preventDefault(),o.resolve({range:t.range,url:e.val(),text:i.val(),isNewWindow:s.is(":checked"),checkProtocol:l.is(":checked")}),this.ui.hideDialog(this.$dialog)})}),this.ui.onDialogHidden(this.$dialog,()=>{i.off(),e.off(),n.off(),"pending"===o.state()&&o.reject()}),this.ui.showDialog(this.$dialog)}).promise()}show(){const t=this.context.invoke("editor.getLinkInfo");this.context.invoke("editor.saveRange"),this.showLinkDialog(t).then(t=>{this.context.invoke("editor.restoreRange"),this.context.invoke("editor.createLink",t)}).fail(()=>{this.context.invoke("editor.restoreRange")})}}
//# sourceMappingURL=/sm/da148f5d42c80b4b202109a22c8cd80cadd5b1ab1ef1756b3fc1724ad68e21a7.map