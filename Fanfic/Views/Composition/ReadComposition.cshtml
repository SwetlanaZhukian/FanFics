@model Fanfic.Models.ViewModels.CompositionViewModel


<!DOCTYPE html>
<html>
<head>
    <style>
        ul.hr {
            margin: 0;
            padding: 4px;
        }

            ul.hr li {
                display: inline-block;
                margin-right: 5px;
                border-radius: 5px;
                background-color: lightsteelblue
            }

        .user_name {
            font-size: 14px;
            font-weight: bold;
        }

        .comments-list .media {
            border-bottom: 1px dotted #ccc;
        }
    </style>

    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

</head>
<body>
    <div class="row">
        <div class="col-6">
            <div class="card bg-light ">
                <h5 class="card-header">@Model.Name</h5>
                <div class="card-body">

                    <dl class="row">
                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.AuthorName)
                        </dt>

                        <dd class="col-sm-8 ">
                            @Html.DisplayFor(model => model.AuthorName)
                        </dd>
                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.Genre)
                        </dt>
                        <dd class="col-sm-8">
                            @Html.DisplayFor(model => model.Genre)
                        </dd>
                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.Tags)
                        </dt>
                        <dd class="col-sm-8">
                            <ul class="hr">
                                @foreach (var tag in Model.Tags)
                                {

                                    <li><a style="color:black; " asp-action="GetAllCompositions" asp-controller="Home" asp-route-tagName="@(tag.Name)"> @tag.Name</a></li>

                                }
                            </ul>
                        </dd>
                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.CurrentUserRating)
                        </dt>

                        <dd class="col-sm-8 ">
                            <div class="rating">

                                @if (User.Identity.IsAuthenticated)
                                {
                                    <input id="input-1" name="input-1" value="@Model.CurrentUserRating" class="theme-krajee-fa">
                                }
                                else
                                {
                                    <input id="input-1" name="input-1" readonly="readonly" value="@Model.CurrentUserRating" class="theme-krajee-fa">
                                }
                            </div>
                        </dd>
                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.Rating)
                        </dt>
                        <dd class="col-sm-8">
                            @Html.DisplayFor(model => model.Rating)
                        </dd>
                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.DateOfCreation)
                        </dt>
                        <dd class="col-sm-8">
                            @Html.DisplayFor(model => model.DateOfCreation)
                        </dd>
                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.Description)
                        </dt>
                        <dd class="col-sm-8">
                            @Html.DisplayFor(model => model.Description)
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
        @if (Model.Chapters.Count() != 0)
        {
            <div class="col-6">
                <h2>Contents</h2>

                <div class="list-group list-group-flush">

                    @for (int i = 0; i < Model.Chapters.Count(); i++)
                    {
                        <a asp-action="ReadChapter" asp-controller="Composition" asp-route-compositionId="@Model.Id"
                           asp-route-chapterIndex="@i" asp-route-id="@(Model.Chapters.ElementAt(i).Id)" class="list-group-item list-group-item-action">@Model.Chapters.ElementAt(i).Name</a>
                    }

                </div>

            </div>

        }
        else
        {
            <h2>This composition is empty!</h2>
        }
    </div>
    <hr />
    <h2>Comments</h2>
    <div id="comment" class="comments-list w-50">

        @foreach (var comment in Model.Comments)
        {
            <div class="media">
                <div class="media-body">
                    <h4 class="media-heading user_name">@comment.User.Name</h4>
                    <p>@comment.Message</p>
                </div>
            </div>

        }
    </div>
   
    <div id="inputForm" class="form-group">
        <label for="comment">Your comment</label>
        <textarea class="form-control w-50" rows="5" id="message"></textarea>
    </div>
    <div class="form-group w-50">
        <input class="btn btn-info  " type="button" id="sendBtn" value="Send" />
    </div>
   

    @section Scripts {
        <script>

        $(document).ready(function () {

                        $('#input-1').rating({
                            hoverOnClear: false,
                            theme: 'krajee-fa',
                            step: 1,
                            size: 'xs',

                        });

                    $('#input-1').on('rating:change', function (event, value, caption) {
                        console.log(value);
                        console.log(caption);
                        var compositionID = '@Model.Id';
                         $.ajax({
                            url: '@Url.Action("Rate","Composition")',
                            data: { stars: value, id: compositionID},
                            type: 'POST',
                             success: function (data)
                             {

                              $('#response').append('<li>' + data + '</li>');

                             },
                             error: function (jxhr, msg, err) {
                              $('#response').append('<li style="color:red">' + msg + '</li>');
                             }
                         });
                    });
             $('#input-1').on('rating:clear', function (event) {
                 console.log("rating:clear");
                        var compositionID = '@Model.Id';
                         $.ajax({
                            url: '@Url.Action("DeleteRating","Composition")',
                            data: { id: compositionID},
                            type: 'POST',
                             success: function (data)
                             {

                              $('#response').append('<li>' + data + '</li>');

                             },
                             error: function (jxhr, msg, err) {
                              $('#response').append('<li style="color:red">' + msg + '</li>');
                             }
                         });
             });

            const hubConnection = new signalR.HubConnectionBuilder()
                .withUrl("/comment")
                .build();

            hubConnection.on("Send", function (data, userName) {
                let elem = document.createElement("h4");
                elem.className = 'media-heading user_name';
                elem.appendChild(document.createTextNode(userName));

                let elem2 = document.createElement("p");
                elem2.appendChild(document.createTextNode(data));

                let div1 = document.createElement("div");
                div1.className = "media";

                let div2 = document.createElement("div");
                div2.className = "media-body";
                div2.appendChild(elem);
                div2.appendChild(elem2);


                div1.appendChild(div2);

                let firstElem = document.getElementById("comment").lastChild;
                document.getElementById("comment").insertBefore(div1, firstElem.nextSibling);

                consol.log("success")

                //let firstElem = document.getElementById("comment").firstChild;
                //var div1 = document.createElement("div");
                //div1.className = ('media');
                //firstElem.

                //var node = document.createElement('li');
                //node.appendChild(document.createTextNode(data));
                //document.querySelector('ul').appendChild(node);
                //var node = document.createElement('li');
                //node.appendChild(document.createTextNode(userName));

                //document.querySelector('ul').appendChild(node);
                //let elem = document.createElement("p");
                //elem.appendChild(document.createTextNode(data));
                //let firstElem = document.getElementById("chatroom").firstChild;
                //document.getElementById("chatroom").insertBefore(elem, firstElem);

            });

            document.getElementById("sendBtn").addEventListener("click", function (e) {
                let message = document.getElementById("message").value;
                var id =@Model.Id;
                var userName = "@User.Identity.Name";
                hubConnection.invoke("Send", message,userName);
                hubConnection.invoke("Save",id, message);


            });

            hubConnection.start();

        });
        </script>
    }

</body>
</html>